package com.manuanand.taskfocus;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/taskfocus") // This means URL's start with /taskfocus (after Application path)
public class TaskController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private TaskRepository taskRepository;
	
	///
	// Task Repository
	///
	@PostMapping(path="/addTask") // Map ONLY POST Requests
	public @ResponseBody String addTask (@RequestParam String name, 
			@RequestParam(required = false) String description,
			@RequestParam(required = false) String dueDateString) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Task newTask = new Task();
		newTask = populateTask(newTask, name, description, dueDateString);
		taskRepository.save(newTask);
		
		return "Saved";
	}

	@PostMapping(path="/updateTask") // Map ONLY POST Requests
	public @ResponseBody String addTask (@RequestParam Integer taskId,
			@RequestParam(required = false) String name, 
			@RequestParam(required = false) String description,
			@RequestParam(required = false) String dueDateString) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (taskId != null) {
			Optional<Task> task = taskRepository.findById(taskId);
			if (task.isEmpty()) {
				return "No task with ID #" +taskId;
			} else {
				Task newTask = task.get();
				populateTask(newTask, name, description, dueDateString);
				taskRepository.save(newTask);
				
				return "Saved";
			}
		}

		return "No task with ID #" +taskId;
	}

	@GetMapping(path="/tasks")
	public @ResponseBody Iterable<Task> getTasks() {
		
		// This returns a JSON or XML with the users
		return taskRepository.findAll();
	}
	
	@GetMapping(path="/getTask")
	public @ResponseBody Task getTaskById(@RequestParam int id) {
		
		System.out.println("ID passed is " +id);
		
		Optional<Task> task = taskRepository.findById(id);
		if (!task.isEmpty()) {
			return task.get();
		} 
		
		return null;
	}
	
	
	///
	/// Helper Methods
	///
	private Task populateTask(Task newTask, String name, String description, String dueDateString) {
		
		newTask.setName(name);
		if (newTask.getCreatedDate() != null) {
			// This is update case
			newTask.setCreatedDate(new Date());
		}
		
		// Optional field processing
		if (description != null) {
			newTask.setDescription(description);
		}
		
		if (dueDateString != null) {
			// Try to parse date - Fallback to current date if not able to parse
			// Supported formats - 2021-07-02
			Date dueDate = null;
			try {
				dueDate = new SimpleDateFormat("yyyy-MM-dd").parse(dueDateString);  
			} catch (ParseException ex) {
				dueDate = new Date();  
			}
			newTask.setDueDate(dueDate);
		}
		
		return newTask;
	}
}